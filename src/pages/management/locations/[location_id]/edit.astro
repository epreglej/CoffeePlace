---
import Layout from "@layouts/Layout.astro";
import { supabase } from "@databases/supabase.js";

const { location_id } = Astro.params;
const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
    cookies.set("referrer-url", Astro.url.pathname, {
        path: "/",
    });
    return redirect("/login");
}

const { data, error } = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
});

if (error) {
    cookies.delete("sb-access-token", {
        path: "/",
    });
    cookies.delete("sb-refresh-token", {
        path: "/",
    });

    return redirect("/login");
}

const email = data.user?.email;
if (email !== "admin@coffee.place") {
    return redirect("/");
}

const response = await fetch("http://localhost:8080/location/" + location_id, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
});

const location = await response.json();
console.log(location);

const response2 = await fetch("http://localhost:8080/table/" + location_id, {
    method: "GET",
    headers: { "Content-Type": "application/json" },
});

const tables = await response2.json();
console.log(tables);

const location_placeholders = structuredClone(location);
---

<Layout>
    <main>
        <div class="center-align top-margin large-margin">
            <article
                class="top-margin medium-elevate medium-width center center-align middle-align surface"
            >
                <h2 class="freeman-regular">Edit location</h2>
            </article>
        </div>

        <article
            class="vertical-margin medium-elevate medium-width center surface"
        >
            <form id="edit-location-form">
                <div class="field label border bottom-margin large-margin">
                    <input
                        id="street_address"
                        class="active"
                        name="street_address"
                        type="text"
                        value={location.street_address}
                    />
                    <label for="street_address" class="active"
                        >Street address</label
                    >
                </div>
                <div class="field label border vertical-margin large-margin">
                    <input
                        id="neighborhood"
                        class="active"
                        name="neighborhood"
                        type="text"
                        value={location.neighborhood}
                    />
                    <label for="neighborhood" class="active">
                        Neighborhood
                    </label>
                </div>
                <div class="field label border vertical-margin large-margin">
                    <input
                        id="city"
                        class="active"
                        name="city"
                        type="text"
                        value={location.city}
                    />
                    <label for="city" class="active">City</label>
                </div>

                <div
                    id="grid"
                    class="medium-width border"
                    style="height: 300px;"
                >
                    {
                        tables.map((table) => (
                            <button
                                class="absolute circle no-margin table brown3 extra black-text"
                                type="button"
                                data-id={table.id}
                                data-name={table.name}
                                data-x={table.x}
                                data-y={table.y}
                                style={`transform:translate(${table.x}px, ${table.y}px);`}
                            >
                                {table.name}
                            </button>
                        ))
                    }
                    <div
                        id="entrance"
                        class="black"
                        style="transform:translate(142px, 0px);  width:60px; height:5px;"
                    >
                    </div>

                    <div
                        class="black square"
                        style="transform:translate(285px, 205px);  width:65px; height:7px;"
                    >
                    </div>

                    <div
                        class="black square"
                        style="transform:translate(285px, 200px);  width:7px; height:63px;"
                    >
                        <pre class="large-text"> <br />  bar</pre>
                    </div>
                </div>
                <div class="space"></div>
                <button
                    class="center no-margin"
                    type="submit"
                    style={"transform:translate(-47px, 33px);"}>Update</button
                >
            </form>
            <div class="space"></div>
            <form id="table-form" style={"transform:translate(0px, -70px);"}>
                <button
                    id="add-table"
                    class="center no-margin secondary small"
                    type="button"
                    data-ui="#add-table-dialog"
                    ><i>table_restaurant</i>Add a new table</button
                >
            </form>
        </article>

        <div id="blur" class="overlay blur"></div>
        <dialog id="add-table-dialog" class="center middle small-width">
            <form id="add-table-form">
                <h5 class="center-align bottom-margin">Add</h5>
                <div class="field label border margin">
                    <input id="name" name="name" type="text" />
                    <label for="name">Table name</label>
                </div>
                <button class="center no-margin" type="submit">Create</button>
                <button
                    type="button"
                    class="transparent"
                    data-ui="#add-table-dialog"
                >
                    Cancel
                </button>
            </form>
        </dialog>

        <div id="blur" class="overlay blur"></div>
        <dialog id="remove-table-dialog" class="center middle small-width">
            <form id="remove-table-form">
                <h5 class="center-align bottom-margin">Removal</h5>
                <p class="center-align">
                    Are you sure that you want to remove
                    <span id="form-table-id" class="bold"></span>?
                </p>

                <nav class="center-align">
                    <button type="submit" data-ui="#dialog">Confirm</button>
                    <button type="button" class="transparent" data-ui="#dialog">
                        Cancel
                    </button>
                </nav>
            </form>
        </dialog>
    </main>
</Layout>

<script define:vars={{ location, tables, location_id }}>
    let selected_table_id;
    let name;
    document.addEventListener("DOMContentLoaded", function () {
        var grid = document.querySelector(".grid");

        var tables = document.querySelectorAll(".table");
        tables.forEach(function (table) {
            interact(table)
                .draggable({
                    origin: "parent",
                    restrict: {
                        restriction: "parent",
                        elementRect: { top: 0, left: 0, bottom: 1, right: 1 },
                    },
                })
                .on("dragmove", function (event) {
                    const target = event.target;
                    let x =
                        (parseFloat(target.getAttribute("data-x")) || 0) +
                        event.dx;
                    let y =
                        (parseFloat(target.getAttribute("data-y")) || 0) +
                        event.dy;

                    x = Math.max(0, Math.min(x, 300));
                    y = Math.max(0, Math.min(y, 332));

                    if ((x > 224 && y > 149) || (x > 99 && x < 199 && y < 50)) {
                        return;
                    }

                    target.style.webkitTransform = target.style.transform =
                        "translate(" + x + "px," + y + "px)";

                    target.setAttribute("data-x", x);
                    target.setAttribute("data-y", y);
                })
                .on("tap", function (event) {
                    ui("#remove-table-dialog");
                    const id = event.target.getAttribute("data-id");
                    const name = event.target.getAttribute("data-name");
                    selected_table_id = id;
                    document.getElementById("form-table-id").innerHTML =
                        `Table ${name}`;
                });
        });

        document
            .getElementById("add-table-form")
            .addEventListener("submit", async (event) => {
                event.preventDefault();

                const formData = new FormData(event.target);

                try {
                    const response = await fetch(
                        "http://localhost:8080/table/create/" +
                            location_id +
                            "/" +
                            formData.get("name"),
                        {
                            method: "POST",
                        },
                    );

                    if (response.status === 200) {
                        window.location.reload();
                    }
                } catch (error) {
                    alert(
                        "An unexpected error occurred. Please try again later.",
                    );
                }
            });

        document
            .getElementById("remove-table-form")
            .addEventListener("submit", async (event) => {
                event.preventDefault();

                try {
                    const response = await fetch(
                        "http://localhost:8080/table/delete/" +
                            selected_table_id,
                        {
                            method: "DELETE",
                        },
                    );

                    if (response.status === 200) {
                        window.location.reload();
                    }
                } catch (error) {
                    alert(
                        "An unexpected error occurred. Please try again later.",
                    );
                }
            });
    });

    document
        .getElementById("edit-location-form")
        .addEventListener("submit", async (event) => {
            event.preventDefault();

            const formData = new FormData(event.target);
            formData.append("uuid", location_id);
            const street_address = formData.get("street_address");
            const neighborhood = formData.get("neighborhood");
            const city = formData.get("city");

            if (!street_address || !neighborhood || !city) {
                return alert("All fields are required");
            }

            let updatedTables = [...tables];
            tables.forEach((table, index) => {
                const tableElement = document.querySelector(
                    `[data-id="${table.id}"]`,
                );
                if (tableElement) {
                    const x = parseInt(tableElement.getAttribute("data-x"));
                    const y = parseInt(tableElement.getAttribute("data-y"));
                    updatedTables[index] = {
                        ...table,
                        x: x,
                        y: y,
                    };
                }
            });
            if (
                street_address === location.street_address &&
                neighborhood === location.neighborhood &&
                city === location.city &&
                JSON.stringify(updatedTables) === JSON.stringify(tables)
            ) {
                return alert("No changes detected");
            }

            console.log(JSON.stringify(formData));
            var object = {};
            formData.forEach((value, key) => (object[key] = value));
            var json = JSON.stringify(object);
            console.log(json);
            let response = await fetch(
                "http://localhost:8080/customer/update",
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: json,
                },
            );
            console.log(response);

            for (const table of updatedTables) {
                let tableResponse = await fetch(
                    "http://localhost:8080/table/update/" +
                        table.id +
                        "/" +
                        table.x +
                        "/" +
                        table.y,
                    {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: json,
                    },
                );
                console.log(tableResponse);
            }
        });
</script>

<style>
    .table {
    }

    .table:hover {
        outline: 2px solid;
        outline-color: #ff0000;
    }
</style>
