---
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../db/supabase";

const { location_id } = Astro.params;
const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
    cookies.set("referrer-url", Astro.url.pathname, {
        path: "/",
    });
    return redirect("/login");
}

const { data, error } = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
});

if (error) {
    cookies.delete("sb-access-token", {
        path: "/",
    });
    cookies.delete("sb-refresh-token", {
        path: "/",
    });

    return redirect("/login");
}

const email = data.user?.email;

// iz baze povuci detalje o specifičnom kafiću na temelju UUID iz linka
const location = {
    id: "u3z",
    neighborhood: "Kozari bok",
    street_address: "Unska 3",
    city: "Zagreb",
};

const tables = [
    { id: 1, available_seats: 2, coordinates: { row: 1, col: 0 } },
    { id: 2, available_seats: 2, coordinates: { row: 0, col: 1 } },
    { id: 3, available_seats: 5, coordinates: { row: 4, col: 1 } },
    { id: 4, available_seats: 5, coordinates: { row: 3, col: 5 } },
];
---

<Layout title="CoffeePlace">
    <div><span>Location ID: {location_id}</span></div>
    <div class="seating-chart medium-width center-align center">
        {
            tables.map((table) => (
                <div
                    class="table"
                    data-ui="#dialog"
                    data-id={table.id}
                    style={`grid-column: ${table.coordinates.col + 1}; grid-row: ${table.coordinates.row + 1};`}
                >
                    {table.id}
                </div>
            ))
        }
    </div>

    <div class="overlay blur"></div>
    <dialog id="dialog" class="center small-width">
        <form id="reservation-form">
            <h5 class="center-align bottom-margin">Reservation</h5>
            <p class="center-align">
                <span>Are you sure that you want to reserve</span>
                <span id="form-table-id" class="bold"></span>
                <span>for next 15 minutes?</span>
            </p>

            <nav class="center-align">
                <button type="submit" data-ui="#dialog">Confirm</button>
                <button type="button" class="transparent" data-ui="#dialog">
                    Cancel
                </button>
            </nav>
        </form>
    </dialog>
</Layout>

<script define:vars={{ email, location_id }}>
    let selected_table_id = null;

    let handleClick = (id) => {
        selected_table_id = id;
        console.log("Table clicked with ID:", id);
        document.getElementById("form-table-id").innerHTML =
            `Table ${selected_table_id}`;
    };

    const tableButtons = document.querySelectorAll(".table");
    tableButtons.forEach((button) =>
        button.addEventListener("click", () => handleClick(button.dataset.id)),
    );

    document
        .getElementById("reservation-form")
        .addEventListener("submit", async (event) => {
            event.preventDefault(); // Prevent the default form submission

            const formData = new FormData();
            formData.append("email", email);
            formData.append("location-id", location_id);
            formData.append("table-id", selected_table_id);

            try {
                const response = await fetch("/api/reservation", {
                    method: "POST",
                    body: formData,
                });

                if (response.status === 303) {
                    window.location.reload();
                }

                // handle error ako ne uspije
                //
                //
            } catch (error) {
                console.error("Error signing in:", error);
                alert("An unexpected error occurred. Please try again later."); // Generic error message
            }
        });
</script>

<style>
    .seating-chart {
        display: grid;
        grid-template-columns: repeat(
            5,
            1fr
        ); /* Creates 5 columns of equal width */
        grid-template-rows: repeat(5, 1fr); /* Creates 5 rows of equal height */
        gap: 10px; /* Space between grid cells */
    }

    .table {
        width: 75px; /* Adjust size as needed */
        height: 75px;
        background-color: #ffd700; /* Example color */
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px; /* Adjust font size as needed */
    }

    .table:hover {
        outline: 2px solid;
        outline-color: #ff0000;
        cursor: pointer;
    }
</style>
