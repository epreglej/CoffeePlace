---
import Layout from "../../layouts/Layout.astro";
import { supabase } from "../../db/supabase";

const { location_id } = Astro.params;
const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
    cookies.set("referrer-url", Astro.url.pathname, {
        path: "/",
    });
    return redirect("/login");
}

const { data, error } = await supabase.auth.setSession({
    refresh_token: refreshToken.value,
    access_token: accessToken.value,
});

if (error) {
    cookies.delete("sb-access-token", {
        path: "/",
    });
    cookies.delete("sb-refresh-token", {
        path: "/",
    });

    return redirect("/login");
}

const email = data.user?.email;

// iz baze povuci detalje o specifičnom kafiću na temelju UUID iz linka
const location = {
    id: "u3z",
    neighborhood: "Vrbik",
    street_address: "Unska 3",
    city: "Zagreb",
};

const tables = [
    {
        id: 1,
        location_uuid: "u3z",
        taken_seats: 2,
        total_seats: 4,
        reserved: "false",
        x: 150,
        y: 50,
    },
    {
        id: 2,
        taken_seats: 0,
        total_seats: 4,
        reserved: "false",
        x: 0,
        y: 200,
    },
    {
        id: 3,
        taken_seats: 5,
        total_seats: 6,
        reserved: "false",
        x: 270,
        y: 0,
    },
    {
        id: 4,
        taken_seats: 0,
        total_seats: 6,
        reserved: "true",
        x: 49,
        y: 0,
    },
];
---

<Layout title="CoffeePlace">
    <main>
        <div class="center-align top-margin large-margin">
            <article
                class="top-margin medium-elevate medium-width center center-align middle-align surface"
            >
                <h2 class="freeman-regular">
                    Reservation<br />{location.neighborhood}
                </h2>
            </article>
        </div>

        <article
            class="vertical-margin medium-elevate medium-width center surface"
        >
            <div id="grid" class="medium-width border" style="height: 300px;">
                {
                    tables.map((table) => (
                        <button
                            class={`vertical absolute circle no-margin table extra black-text ${
                                table.reserved === "true"
                                    ? "red6"
                                    : table.taken_seats === 0
                                      ? "green5"
                                      : "orange4"
                            }`}
                            type="button"
                            data-id={table.id}
                            data-x={table.x}
                            data-y={table.y}
                            data-reserved={table.reserved}
                            data-taken-seats={table.taken_seats}
                            data-total-seats={table.total_seats}
                            style={`transform:translate(${table.x}px, ${table.y}px);`}
                        >
                            {table.taken_seats}/{table.total_seats}
                            <i class="small">airline_seat_recline_normal</i>
                        </button>
                    ))
                }
                <div
                    id="entrance"
                    class="black"
                    style="transform:translate(142px, 0px);  width:60px; height:5px;"
                >
                </div>

                <div
                    class="black square"
                    style="transform:translate(285px, 205px);  width:65px; height:7px;"
                >
                </div>

                <div
                    class="black square"
                    style="transform:translate(285px, 200px);  width:7px; height:63px;"
                >
                    <pre class="large-text"> <br />  bar</pre>
                </div>
            </div>
        </article>

        <div id="blur" class="overlay blur"></div>
        <dialog id="dialog" class="center middle small-width">
            <form id="reservation-form">
                <h5 class="center-align bottom-margin">Reservation</h5>
                <p class="center-align">
                    <span>Are you sure that you want to reserve</span>
                    <span id="form-table-id" class="bold"></span>
                    <span>for next 15 minutes?</span>
                </p>

                <nav class="center-align">
                    <button type="submit" data-ui="#dialog">Confirm</button>
                    <button type="button" class="transparent" data-ui="#dialog">
                        Cancel
                    </button>
                </nav>
            </form>
        </dialog>
    </main>

    <script define:vars={{ email, location_id, tables }}>
        let selected_table_id = null;

        document.addEventListener("DOMContentLoaded", function () {
            var tables = document.querySelectorAll(".table");
            tables.forEach(function (table) {
                interact(table).on("tap", function (event) {
                    const reserved = event.target.getAttribute("data-reserved");
                    const taken_seats = parseInt(
                        event.target.getAttribute("data-taken-seats"),
                    );

                    if (taken_seats === 0 && reserved === "false") {
                        ui("#dialog");
                        const id = event.target.getAttribute("data-id");
                        selected_table_id = id;
                        document.getElementById("form-table-id").innerHTML =
                            `Table ${selected_table_id}`;
                    }
                });
            });
        });

        document
            .getElementById("reservation-form")
            .addEventListener("submit", async (event) => {
                event.preventDefault(); // Prevent the default form submission

                const formData = new FormData();
                formData.append("email", email);
                formData.append("location-id", location_id);
                formData.append("table-id", selected_table_id);

                const plainFormData = Object.fromEntries(formData.entries());

                try {
                    const response = await fetch("/api/reservation", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(plainFormData),
                    });

                    if (response.status === 303) {
                        window.location.reload();
                    }

                    // handle error ako ne uspije
                    //
                    //
                } catch (error) {
                    alert(
                        "An unexpected error occurred. Please try again later.",
                    );
                }
            });
    </script>
</Layout>

<style>
    .table {
    }

    .table:hover {
        outline: 2px solid;
        outline-color: #ff0000;
        cursor: pointer;
    }
</style>
